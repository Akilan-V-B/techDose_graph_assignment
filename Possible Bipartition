class Solution {
    public boolean possibleBipartition(int n, int[][] dislikes) {
        List<List<Integer>> arr = new ArrayList<>();
        for(int i=0;i<=n;i++){
            arr.add(new ArrayList<>());
        }
        for(int []i : dislikes){
            int a = i[0];
            int b = i[1];
            arr.get(a).add(b);
            arr.get(b).add(a);
        }
        int []vis = new int[n+1];

        for(int i=1;i<=n;i++){
            if(vis[i]!=0) continue;
            Queue<Integer> q = new LinkedList<>();
            q.add(i);
            vis[i]=1;
            while(!q.isEmpty()){
                int curr = q.poll();
                for(int nei : arr.get(curr)){
                    if(vis[nei]!=0 && vis[nei]==vis[curr]) return false;
                    else if(vis[nei]==0){
                        vis[nei]=vis[curr]*-1;
                        q.add(nei);
                    }
                }
            }
        } 
        return true;
    }
}
